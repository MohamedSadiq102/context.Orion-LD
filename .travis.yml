dist: xenial
language: minimal

env:
  global:
    - IMAGE_RELEASE_DEBIAN=fiware/orion-ld
    - IMAGE_RELEASE_CENTOS=fiware/orion-ld:centos
    - IMAGE_DEPS_DEBIAN=fiware/orion-ld:deps-debian
    - IMAGE_DEPS_CENTOS=fiware/orion-ld:deps-centos
    - HOME=/opt/orion
    - secure: tVGPaHVXk+oRNs3civESLFQImhM5bpYTbjk9SXwHg/2hdX5laANEtxAKS8k7X5TZwj2oMV8nDzJojU1NOm3292IZsP/0BijCnkwSrLgN2zi/AK8FmiO0KT9+jkQH7T8/K9KisqVSUIaBFlIlFhhDwR2OPGjlPWZpt7DuTePNV4jgFhkMjfROzLZDc4aWA7uzKvw4XTegMvP/lRiU3urlTqJGXuKaCmkQeTHr1cGPbnycAqwDKYKxzKQdRhyQT96+MsZnfwgg8JLKQJpqEIFVQ22rxoZWUZaYbMpDJP1ZPnoF7v12ODNoFoZM7xWom98VAQ6L7SBcY7laInfa/N7zzu0GeIjGa7RwigLy9BPmOfpXBOSifdcAE6sZ9vLYoMKdE4SOYZ8uOfeuK5kJe0AY4tqVvCvuTdsQp0wmCnd8spH3L9sHlt7QJz+q+RklhFk2h9duyPNr5mfv/maWF8lJz/9eR8Lmmzeg/B79nvZEd2eCOYi2I9HcAucYZL4bZXIW6ROnf5WFdPcbHZtbeB5iBWKwhHp2gcDwTZtS6Ugx9axXMV4pAOS5qPKZNmH6n1GSCj25iGzluObje72xDy0s0lsLDlym7xvey3Ox/udSj17nEZf1ylQ9HR+ey7YS3UBRadopfvAyWy7ss03Tj2dobI7HcICknuztb+IdlAXceqE=
    - secure: dGrPDCxNNZe72esWl6Lvj7mn9IFYT8rbOJ9QPjsU0CsRFTu2t2XwDAMNRzbwlLIO3ANWTuMXuURsjQwdIh+fIjIG48rS4iTn7TiI4q3kP5pDbw0tZ5twpleZ5xh7twkb5CYTUeOtkBAbL/onOFavqAwZN3lu8sqFqOSbWi1VTAW2ZRTEX6QXUTd6fs0rXpdzSRzIqVZceHcDKcy1X07LmEWcm92jZf1jlJ2snhxOoSx/Ox29gSsbfyIyAl1HByVxqq20od6IViWh8Gpt4HJZU6+4Gp0MU+0yQI34heD7q02PB+/TQElVMmnadsd9HU1HfVF5uv4TuYO0zcmEgQHfwLKLD+d/mZhwrH2RgRwLSiCol6DJkpMHPbDEpB5l8Z32Ex+E6h7CtIE9l3nCGLJu4m+wbL0TT1wHGI8lpXW4RifW4vd6Zf+71CVW3OjFptXEjJPtrdGH51r3BH4LnTTMrOXzI8ZRyFpBi8EorLJAnrMc+7EwzVd1NTU07gDB22jNmtJkDty7BfE31GL4C04q9BBQSefFuZI92EnMKbYHHQUPdl9rLxn1QACcS2W+CYYA78X+R8RoTeu4Lrmcb7x6ByQuzenwj//Udu+0TBh3F5O1S4hC3FMDjwi5RC8u8GiEdLxmnKQXuhD/839SeFJXtmFnyN27wfrceAOivsP1rjw=
    - secure: aTkQKOSU2eSx5DjEqj5/GPiu0UiyBKNmXPoGYd6wQFajnKbk6ErEW66onFJGMiL3g/yiyP6Utwm4JaBgqxQ1WJDHSn8MbljFJ03xAtJsyz+E0Wh65kshK3IFxF2M7glt0ZHH3kvLEH9czFrNcZ3eusMC8GEWAkXQ0jwK7DVW4+rVaajHpZLsxgU3TOwxMML0AT+kfSPnOKBsjUwOtLmU+ffatGxA1r5leYvVTpzza9di6bqJf/hQN6z07gnhkAX3Ypz3JNPDYuFjK0jHwhkDFeN91FmoShuB5dOuvs16fXojjxYJDwMQIW/Eo0WjVEV6qhGtnYI6RnGFDI6Cc/NjDN4CAmssarj8pXdAQSzQVzSXohxsILIMuY1QdQpwLjJJdmHMwtPegeS49PCIaRKpgKPR9/FuqUpRFFkAX6Hy0fxC9rRkSTCSIwpFL37PWpRZKE5e12wNZPPDK2A2gpFIruv/upDmL1dhK5YjNoMENtBgOrG3Uo/YfCIEngDesNzE9XwGisW1u4TqaQ1rNVrdezS4KzC1njnjqw6MC+w9rCUNk4d/lR1y/h0q68Pa3c7IdLWUhdKDjLPAZdH0G4dpRxpZzwV/ocBmWSwcWT+74hBe1BC8kWPL7J2Q0T7IxcLDEKQvnfT1q2/Gg4oPrgh3Zp2mOrXtTKgmCHo5FrNdTnI=

stages:
  - test
  - name: deploy
    if: branch = develop

jobs:
  include:
    - env: STAGE=compliance
      name: "Compliance Tests"
      stage: test
      install: true
      script: >
        echo -e " \033[1;33mRunning Compliance Tests";
        $(pwd)/docker/build.sh -s compliance -t -p $(pwd);
    - env: STAGE=debian_unit
      name: "Unit Tests (Debian)"
      stage: test
    - env: STAGE=debian_functional_1_450
      name: "Functional Tests 1-450 (Debian)"
      stage: test
    - env: STAGE=debian_functional_451_700
      name: "Functional Tests 451-700 (Debian)"
      stage: test
    - env: STAGE=debian_functional_701_1000
      name: "Functional Tests 701-1000 (Debian)"
      stage: test
    - env: STAGE=debian_functional_1001_1400
      name: "Functional Tests 1001-1400 (Debian)"
      stage: test
    - env: STAGE=debian_integration
      name: "NGSI-LD Integration Tests"
      stage: test
      language: nodejs
      node_js: 12.14
      install: >
        echo -e " \033[1;33mBuilding Debian Docker image for Integration Test";
        travis_wait 30 docker build --quiet \
            --build-arg TOKEN=${TOKEN} \
            --build-arg REV=${TRAVIS_COMMIT} \
            --build-arg STAGE=release -t ${IMAGE_RELEASE_DEBIAN} \
            -f $(pwd)/docker/Dockerfile-debian $(pwd)/docker/ ;
     
      before_script : >
        curl -LO https://github.com/FIWARE/NGSI-LD_TestSuite/archive/master.zip;
        shasum -a 256 master.zip;
        unzip -q master.zip;
        rm master.zip;
        cd NGSI-LD_TestSuite-master;  
        export EXCLUDED_TESTS="001|001|003|004|014|158|";
        npm install;

      script:  >
         echo -e " \033[1;33mRunning NGSI-LD Integration Test Suite";
         ./services orion;
         export TEST_ENDPOINT=http://localhost:1026;
         npm test;
    - env: STAGE=debian_release
      name: "Deploy to Docker Hub"
      stage: deploy
      install: >
        if [[ "${PUSH_STATUS}" ]]; then
          echo -e " \033[1;33mBuilding Debian Docker image for Release";
          travis_wait 30 docker build --quiet \
            --build-arg TOKEN=${TOKEN} \
            --build-arg REV=${TRAVIS_COMMIT} \
            --build-arg STAGE=release -t ${IMAGE_RELEASE_DEBIAN} \
            -f $(pwd)/docker/Dockerfile-debian $(pwd)/docker/ ;
        fi
      script: true
      after_success: >
        if [[ "${PUSH_STATUS}" ]]; then
          echo -e " \033[1;33mPushing Debian Release to Docker Hub";
          docker push ${IMAGE_RELEASE_DEBIAN};
        fi
    - env: STAGE=debian_deps
      name: "Deploy to Docker Hub - Image with Deps"
      stage: deploy
      install: >
        if [[ "${PUSH_STATUS}" ]]; then
          travis_wait 30 docker build --quiet \
            --build-arg TOKEN=${TOKEN} \
            --build-arg REV=${TRAVIS_COMMIT} \
            --build-arg STAGE=deps -t ${IMAGE_DEPS_DEBIAN} \
            -f $(pwd)/docker/Dockerfile-debian $(pwd)/docker/ ;
        fi
      script: true
      after_success: >
        if [[ "${PUSH_STATUS}" ]]; then
          echo -e " \033[1;33mPushing Debian Release (with Dependencies) to Docker Hub";
          docker push ${IMAGE_DEPS_DEBIAN};
        fi
    

  allow_failures:
    - env: STAGE=debian_integration
      



before_install: >
  export PLATFORM=$(echo ${STAGE} | cut -c1-6);
  export STAGE_TYPE=$(echo ${STAGE} | cut -c8-);
  
  if [[ "${PUSH}" && ${TRAVIS_BRANCH} == "develop" && ${TRAVIS_EVENT_TYPE} == "push" ]]; then 
    export PUSH_STATUS="True"; 
  fi
  
  if [[ "${TRAVIS_EVENT_TYPE}" == "pull_request" && "${STAGE_TYPE}" != "release" && "${STAGE_TYPE}" != "deps" ]]; then 
    export TEST_STATUS="True"; 
  fi
  
  echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin;
  git lfs pull;

  if [[ "${TEST_STATUS}" && "${STAGE}" != "compliance" ]]; then 
    echo "0" | sudo tee /proc/sys/net/ipv6/conf/all/disable_ipv6;
    echo '{"ipv6":true,"fixed-cidr-v6":"2001:db8:1::/64"}'| sudo tee /etc/docker/daemon.json; 
    sudo service docker restart; 
  fi

install: >
  echo -e " \033[1;33mRebuilding Debian Docker Images (with deps)";
  travis_wait 30 docker build --quiet \
    --build-arg TOKEN=${TOKEN} \
    --build-arg REV=${TRAVIS_COMMIT} \
    --build-arg STAGE=deps -t ${IMAGE_DEPS_DEBIAN} \
    -f $(pwd)/docker/Dockerfile-debian $(pwd)/docker/ ;
    
script: >
  echo -e " \033[1;33mRunning Tests against Debian Image";
  docker run \
    -t --rm -v $(pwd):${HOME} --entrypoint bash \
    -e ORIONLD_CACHED_CONTEXT_DIRECTORY=${HOME}/ldcontexts \
    -e CB_SKIP_FUNC_TESTS="${CB_SKIP_FUNC_TESTS}" \
    ${IMAGE_DEPS_DEBIAN} build.sh -s ${STAGE_TYPE} -dqt;

after_success: true
  
notifications:
  email:
    recipients:
    - ken.zangelin@fiware.org
    - jorgepereirasb@gmail.com
    - icazevedo10@gmail.com
    - douglasrolim@gmail.com
    - larysse.izidio@gmail.com
    on_success: never
    on_failure: always
  webhooks:
    urls:
      secure: sLALYcxSpbz7KMZsHyGtNPc+jpVpdps26DljK7sNONOmn0QPxpr1q4y/+cnKzPQO1cN0sTJV15t2OQ46aI4Mo3hJpUGAgbFomELtlH87V+4w+Q+nDJQj9ijR/T5vi2z3PP3u7rh3Y+IjIqJmfo6LfQ6/G9I72GVNkOcQ/3VncjRGTLqd0w5UFVczg2AcHP5C6diohVsjIYA9+r9s0oGrntawfNmXvExn0xvxWkpEKTuICoMDHj2uw2Bl9WMRbgzrWAyPa3dwb9oBB4ATpE11QMthm/zoDfUvoKFRHmmL1eqSiMDE/MfIuRtE9yy0eEtwRMMLjLrDNmtPK+s+oPR+Ofz2WVu8q8AcXXjEw89YfnPpq9ox/MkS5N409OM/hJDhdLcjj1eC45McoKZiw2JUaEoX0lfMsbD+OOIJHSBuHtMyWD4XDZWwzwMTUiRRs3ND8iOTIbs4CXfr5ubTQCqu3Sr2CNH6hL7fGqolvv100Z4vl83gPsPb6yRz8VgDOTK+CR2erYAV89b8M/NC0QJ/6l/qRQShnfli3BiEi5qvvMaFf0mPW+vjAVuqtwjrT+1ytkD0YQAiJXP9Lds2A5u1ONJbOHARzKykx0ecCrSzUE6PZnvsRZkwebnjCsS85/TNYInni/FNo5IdDfK4M65yKiZf8cSm138ZtoYWFuosB5M=
    on_success: always
    on_failure: never
